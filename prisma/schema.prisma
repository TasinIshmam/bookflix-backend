generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Feature's to potentially add: preferred genres, like/rating, comment.

model Book {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  title            String           @unique
  copyright        Boolean          @default(false)
  language         String           @default("en")
  updatedAt        DateTime         @updatedAt
  fileUrl          String           @unique
  fileType         String
  coverImageUrl    String?
  authors          Author[]
  genres           Genre[]
  readingHistories ReadingHistory[]
}

model Genre {
  id      Int    @id @default(autoincrement())
  name    String @unique
  books   Book[]
  likedBy User[]
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  birthYear Int?
  deathYear Int?
  createdAt DateTime @default(now())
  books     Book[]
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  createdAt        DateTime         @default(now())
  firstName        String
  lastName         String?
  favoriteGenres   Genre[] 
  readingHistories ReadingHistory[]

}

model ReadingHistory {
  id                Int      @id @default(autoincrement())
  book              Book?    @relation(fields: [bookId], references: [id])
  bookId            Int?
  user              User?    @relation(fields: [userId], references: [id])
  userId            Int?
  currentPage       Int      @default(1)
  isFavorite        Boolean  @default(false)
  isFinishedReading Boolean  @default(false)
  startDate         DateTime @default(now())
  lastUpdate        DateTime @updatedAt
}

// ---------------  AUTOMATICALLY GENERATED FROM DJANGO ORM, DO NOT MODIFY  -----------------

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]

  @@index([name], name: "auth_group_name_a6ea08ec_like")
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_group      auth_group      @relation(fields: [group_id], references: [id])
  auth_permission auth_permission @relation(fields: [permission_id], references: [id])

  @@unique([group_id, permission_id], name: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], name: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], name: "auth_group_permissions_permission_id_84c5c92e")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id])
  auth_group_permissions     auth_group_permissions[]
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], name: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], name: "auth_permission_content_type_id_2f476e4b")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.Timestamptz(6)
  is_superuser               Boolean
  username                   String                       @unique @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.Timestamptz(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]

  @@index([username], name: "auth_user_username_6821ab7c_like")
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id])
  auth_user  auth_user  @relation(fields: [user_id], references: [id])

  @@unique([user_id, group_id], name: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], name: "auth_user_groups_group_id_97559544")
  @@index([user_id], name: "auth_user_groups_user_id_6a12ed8b")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id])
  auth_user       auth_user       @relation(fields: [user_id], references: [id])

  @@unique([user_id, permission_id], name: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], name: "auth_user_user_permissions_permission_id_1fbb5f2c")
  @@index([user_id], name: "auth_user_user_permissions_user_id_a95ead1b")
}

model core_author {
  id                BigInt              @id @default(autoincrement())
  name              String              @db.VarChar(256)
  birthYear         Int?
  deathYear         Int?
  date_added        DateTime            @db.Date
  date_modified     DateTime            @db.Date
  core_book_authors core_book_authors[]
}

model core_book {
  id                BigInt              @id @default(autoincrement())
  fileUrl           String              @db.VarChar(100)
  coverImgUrl       String?             @db.VarChar(100)
  title             String              @db.VarChar(512)
  fileType          String?             @db.VarChar(32)
  language          String?             @db.VarChar(24)
  copyright         Boolean
  date_added        DateTime            @db.Date
  date_modified     DateTime            @db.Date
  core_book_authors core_book_authors[]
  core_book_genres  core_book_genres[]
}

model core_book_authors {
  id          BigInt      @id @default(autoincrement())
  book_id     BigInt
  author_id   BigInt
  core_author core_author @relation(fields: [author_id], references: [id])
  core_book   core_book   @relation(fields: [book_id], references: [id])

  @@unique([book_id, author_id], name: "core_book_authors_book_id_author_id_e39270c2_uniq")
  @@index([author_id], name: "core_book_authors_author_id_de742869")
  @@index([book_id], name: "core_book_authors_book_id_d8814d03")
}

model core_book_genres {
  id         BigInt     @id @default(autoincrement())
  book_id    BigInt
  genre_id   BigInt
  core_book  core_book  @relation(fields: [book_id], references: [id])
  core_genre core_genre @relation(fields: [genre_id], references: [id])

  @@unique([book_id, genre_id], name: "core_book_genres_book_id_genre_id_70b18aed_uniq")
  @@index([book_id], name: "core_book_genres_book_id_cd7bacb2")
  @@index([genre_id], name: "core_book_genres_genre_id_bfaff822")
}

model core_genre {
  id               BigInt             @id @default(autoincrement())
  name             String             @db.VarChar(256)
  date_added       DateTime           @db.Date
  date_modified    DateTime           @db.Date
  core_book_genres core_book_genres[]
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id])
  auth_user           auth_user            @relation(fields: [user_id], references: [id])

  @@index([content_type_id], name: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], name: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], name: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], name: "django_session_expire_date_a5c62663")
  @@index([session_key], name: "django_session_session_key_c0390e0f_like")
}
